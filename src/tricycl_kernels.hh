#ifndef tricycl_kernels_hh
#define tricycl_kernels_hh

static const char * pcr_kernels_PPSTR = 
"#pragma OPENCL EXTENSION cl_khr_fp64 : enable\n"
"#pragma OPENCL EXTENSION cl_amd_printf : enable\n"
"__kernel void pcr_branch_free_kernel(__global real_t *a_d,\n"
" __global real_t *b_d, __global real_t *c"
"_d, __global real_t *d_d,\n"
" __global real_t *x_d, __local real_t *shared, int system_size,\n"
" int num_systems, int iterations) {\n"
" size_t thid = get_local_id(0);\n"
" size_t blid = get_group_id(0);\n"
" int delta = 1;\n"
" __local real_t * a = shared;\n"
" __local real_t * b = &a[system_size+1];\n"
" __local real_t * c = &b[system_size+1];\n"
" __local real_t * d = &c[system_size+1];\n"
" __local real_t * x = &d[system_size+1];\n"
" a[thid] = a_d[thid + blid * system_size];\n"
" b[thid] = b_d[thid + blid * system_size];\n"
" c[thid] = c_d[thid + blid * system_size];\n"
" d[thid] = d_d[thid + blid * system_size];\n"
" real_t aNew, bNew, cNew, dNew;\n"
" barrier(CLK_LOCAL_MEM_FENCE);\n"
" for (int j = 0; j < iterations; j++) {\n"
"  int i = thid;\n"
"  int iRight = i+delta;\n"
"  iRight = iRight & (system_size-1);\n"
"  int iLeft = i-delta;\n"
"  iLeft = iLeft & (system_size-1);\n"
"#ifndef NATIVE_DIVIDE\n"
"  real_t tmp1 = a[i] / b[iLeft];\n"
"  real_t tmp2 = c[i] / b[iRight];\n"
"#else\n"
"  real_t tmp1 = native_divide(a[i], b[iLeft]);\n"
"  real_t tmp2 = native_divide(c[i], b[iRight]);\n"
"#endif\n"
"  bNew = b[i] - c[iLeft] * tmp1 - a[iRight] * tmp2;\n"
"  dNew = d[i] - d[iLeft] * tmp1 - d[iRight] * tmp2;\n"
"  aNew = -a[iLeft] * tmp1;\n"
"  cNew = -c[iRight] * tmp2;\n"
"  barrier(CLK_LOCAL_MEM_FENCE);\n"
"  b[i] = bNew;\n"
"   d[i] = dNew;\n"
"  a[i] = aNew;\n"
"  c[i] = cNew;\n"
"  delta *= 2;\n"
"  barrier(CLK_LOCAL_MEM_FENCE);\n"
" }\n"
" if (thid < delta) {\n"
"  int addr1 = thid;\n"
"  int addr2 = thid + delta;\n"
"  real_t tmp3 = b[addr2] * b[addr1] - c[addr1] * a[addr2];\n"
"#ifndef NATIVE_DIVIDE\n"
"  x[addr1] = (b[addr2] * d[addr1] - c[addr1] * d[addr2]) / tmp3;\n"
"  x[addr2] = (d[addr2] * b[addr1] - d[addr1] * a[addr2]) / tmp3;\n"
"#else\n"
"  x[addr1] = native_divide((b[addr2] * d[addr1] - c[addr1] *\n"
"   d[addr2]), tmp3);\n"
"  x[addr2] = native_divide((d[addr2] * b[addr1] - d[addr1] *\n"
"   a[addr2]), tmp3);\n"
"#endif\n"
" }\n"
" barrier(CLK_LOCAL_MEM_FENCE);\n"
" x_d[thid + blid * system_size] = x[thid];\n"
"}\n"
"\n"
;

#endif // tricycl_kernels_hh
